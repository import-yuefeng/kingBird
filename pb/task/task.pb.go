// Code generated by protoc-gen-go. DO NOT EDIT.
// source: task.proto

package task

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TaskReply struct {
	IsSuccess            bool     `protobuf:"varint,1,opt,name=isSuccess,proto3" json:"isSuccess,omitempty"`
	OptionMessage        string   `protobuf:"bytes,2,opt,name=optionMessage,proto3" json:"optionMessage,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskReply) Reset()         { *m = TaskReply{} }
func (m *TaskReply) String() string { return proto.CompactTextString(m) }
func (*TaskReply) ProtoMessage()    {}
func (*TaskReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce5d8dd45b4a91ff, []int{0}
}

func (m *TaskReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskReply.Unmarshal(m, b)
}
func (m *TaskReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskReply.Marshal(b, m, deterministic)
}
func (m *TaskReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskReply.Merge(m, src)
}
func (m *TaskReply) XXX_Size() int {
	return xxx_messageInfo_TaskReply.Size(m)
}
func (m *TaskReply) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskReply.DiscardUnknown(m)
}

var xxx_messageInfo_TaskReply proto.InternalMessageInfo

func (m *TaskReply) GetIsSuccess() bool {
	if m != nil {
		return m.IsSuccess
	}
	return false
}

func (m *TaskReply) GetOptionMessage() string {
	if m != nil {
		return m.OptionMessage
	}
	return ""
}

// RunTaskRequest
type RunTaskRequest struct {
	Cmd                  string   `protobuf:"bytes,1,opt,name=cmd,proto3" json:"cmd,omitempty"`
	Mode                 string   `protobuf:"bytes,2,opt,name=mode,proto3" json:"mode,omitempty"`
	Config               string   `protobuf:"bytes,3,opt,name=config,proto3" json:"config,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RunTaskRequest) Reset()         { *m = RunTaskRequest{} }
func (m *RunTaskRequest) String() string { return proto.CompactTextString(m) }
func (*RunTaskRequest) ProtoMessage()    {}
func (*RunTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce5d8dd45b4a91ff, []int{1}
}

func (m *RunTaskRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunTaskRequest.Unmarshal(m, b)
}
func (m *RunTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunTaskRequest.Marshal(b, m, deterministic)
}
func (m *RunTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunTaskRequest.Merge(m, src)
}
func (m *RunTaskRequest) XXX_Size() int {
	return xxx_messageInfo_RunTaskRequest.Size(m)
}
func (m *RunTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RunTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RunTaskRequest proto.InternalMessageInfo

func (m *RunTaskRequest) GetCmd() string {
	if m != nil {
		return m.Cmd
	}
	return ""
}

func (m *RunTaskRequest) GetMode() string {
	if m != nil {
		return m.Mode
	}
	return ""
}

func (m *RunTaskRequest) GetConfig() string {
	if m != nil {
		return m.Config
	}
	return ""
}

type StopTaskRequest struct {
	Cmd                  string   `protobuf:"bytes,1,opt,name=cmd,proto3" json:"cmd,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StopTaskRequest) Reset()         { *m = StopTaskRequest{} }
func (m *StopTaskRequest) String() string { return proto.CompactTextString(m) }
func (*StopTaskRequest) ProtoMessage()    {}
func (*StopTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce5d8dd45b4a91ff, []int{2}
}

func (m *StopTaskRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StopTaskRequest.Unmarshal(m, b)
}
func (m *StopTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StopTaskRequest.Marshal(b, m, deterministic)
}
func (m *StopTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopTaskRequest.Merge(m, src)
}
func (m *StopTaskRequest) XXX_Size() int {
	return xxx_messageInfo_StopTaskRequest.Size(m)
}
func (m *StopTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StopTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StopTaskRequest proto.InternalMessageInfo

func (m *StopTaskRequest) GetCmd() string {
	if m != nil {
		return m.Cmd
	}
	return ""
}

type ContinueTaskRequest struct {
	Cmd                  string   `protobuf:"bytes,1,opt,name=cmd,proto3" json:"cmd,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContinueTaskRequest) Reset()         { *m = ContinueTaskRequest{} }
func (m *ContinueTaskRequest) String() string { return proto.CompactTextString(m) }
func (*ContinueTaskRequest) ProtoMessage()    {}
func (*ContinueTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce5d8dd45b4a91ff, []int{3}
}

func (m *ContinueTaskRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ContinueTaskRequest.Unmarshal(m, b)
}
func (m *ContinueTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ContinueTaskRequest.Marshal(b, m, deterministic)
}
func (m *ContinueTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContinueTaskRequest.Merge(m, src)
}
func (m *ContinueTaskRequest) XXX_Size() int {
	return xxx_messageInfo_ContinueTaskRequest.Size(m)
}
func (m *ContinueTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ContinueTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ContinueTaskRequest proto.InternalMessageInfo

func (m *ContinueTaskRequest) GetCmd() string {
	if m != nil {
		return m.Cmd
	}
	return ""
}

type CheckTaskRequest struct {
	Cmd                  string   `protobuf:"bytes,1,opt,name=cmd,proto3" json:"cmd,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckTaskRequest) Reset()         { *m = CheckTaskRequest{} }
func (m *CheckTaskRequest) String() string { return proto.CompactTextString(m) }
func (*CheckTaskRequest) ProtoMessage()    {}
func (*CheckTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce5d8dd45b4a91ff, []int{4}
}

func (m *CheckTaskRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CheckTaskRequest.Unmarshal(m, b)
}
func (m *CheckTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CheckTaskRequest.Marshal(b, m, deterministic)
}
func (m *CheckTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckTaskRequest.Merge(m, src)
}
func (m *CheckTaskRequest) XXX_Size() int {
	return xxx_messageInfo_CheckTaskRequest.Size(m)
}
func (m *CheckTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CheckTaskRequest proto.InternalMessageInfo

func (m *CheckTaskRequest) GetCmd() string {
	if m != nil {
		return m.Cmd
	}
	return ""
}

type SaveTaskRequest struct {
	Cmd                  string   `protobuf:"bytes,1,opt,name=cmd,proto3" json:"cmd,omitempty"`
	Path                 string   `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	SqlMode              bool     `protobuf:"varint,3,opt,name=sqlMode,proto3" json:"sqlMode,omitempty"`
	S3Mode               bool     `protobuf:"varint,4,opt,name=s3Mode,proto3" json:"s3Mode,omitempty"`
	FsMode               bool     `protobuf:"varint,5,opt,name=fsMode,proto3" json:"fsMode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SaveTaskRequest) Reset()         { *m = SaveTaskRequest{} }
func (m *SaveTaskRequest) String() string { return proto.CompactTextString(m) }
func (*SaveTaskRequest) ProtoMessage()    {}
func (*SaveTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce5d8dd45b4a91ff, []int{5}
}

func (m *SaveTaskRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SaveTaskRequest.Unmarshal(m, b)
}
func (m *SaveTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SaveTaskRequest.Marshal(b, m, deterministic)
}
func (m *SaveTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveTaskRequest.Merge(m, src)
}
func (m *SaveTaskRequest) XXX_Size() int {
	return xxx_messageInfo_SaveTaskRequest.Size(m)
}
func (m *SaveTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SaveTaskRequest proto.InternalMessageInfo

func (m *SaveTaskRequest) GetCmd() string {
	if m != nil {
		return m.Cmd
	}
	return ""
}

func (m *SaveTaskRequest) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *SaveTaskRequest) GetSqlMode() bool {
	if m != nil {
		return m.SqlMode
	}
	return false
}

func (m *SaveTaskRequest) GetS3Mode() bool {
	if m != nil {
		return m.S3Mode
	}
	return false
}

func (m *SaveTaskRequest) GetFsMode() bool {
	if m != nil {
		return m.FsMode
	}
	return false
}

func init() {
	proto.RegisterType((*TaskReply)(nil), "task.TaskReply")
	proto.RegisterType((*RunTaskRequest)(nil), "task.RunTaskRequest")
	proto.RegisterType((*StopTaskRequest)(nil), "task.StopTaskRequest")
	proto.RegisterType((*ContinueTaskRequest)(nil), "task.ContinueTaskRequest")
	proto.RegisterType((*CheckTaskRequest)(nil), "task.CheckTaskRequest")
	proto.RegisterType((*SaveTaskRequest)(nil), "task.SaveTaskRequest")
}

func init() { proto.RegisterFile("task.proto", fileDescriptor_ce5d8dd45b4a91ff) }

var fileDescriptor_ce5d8dd45b4a91ff = []byte{
	// 331 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0x4f, 0x4f, 0xf2, 0x40,
	0x10, 0xc6, 0xdf, 0x02, 0x2f, 0xd2, 0x89, 0x5a, 0x32, 0x2a, 0xa9, 0xc6, 0x03, 0xa9, 0x24, 0x72,
	0xe2, 0x20, 0xea, 0xc9, 0x5b, 0xcf, 0x60, 0xb2, 0xf5, 0x0b, 0xd4, 0xb2, 0x40, 0x53, 0xd8, 0x2d,
	0xec, 0x56, 0xe3, 0xd1, 0x8f, 0xe2, 0x37, 0x35, 0xbb, 0xdb, 0xd6, 0x94, 0xd4, 0x7a, 0x9b, 0xe7,
	0x99, 0x3f, 0xdd, 0xf9, 0x4d, 0x01, 0x64, 0x28, 0x92, 0x49, 0xba, 0xe7, 0x92, 0x63, 0x47, 0xc5,
	0xde, 0x33, 0xd8, 0x2f, 0xa1, 0x48, 0x08, 0x4d, 0x37, 0x1f, 0x78, 0x0d, 0x76, 0x2c, 0x82, 0x2c,
	0x8a, 0xa8, 0x10, 0xae, 0x35, 0xb4, 0xc6, 0x3d, 0xf2, 0x63, 0xe0, 0x08, 0x4e, 0x78, 0x2a, 0x63,
	0xce, 0x66, 0x54, 0x88, 0x70, 0x45, 0xdd, 0xd6, 0xd0, 0x1a, 0xdb, 0xa4, 0x6a, 0x7a, 0x73, 0x38,
	0x25, 0x19, 0x33, 0x33, 0x77, 0x19, 0x15, 0x12, 0xfb, 0xd0, 0x8e, 0xb6, 0x0b, 0x3d, 0xcf, 0x26,
	0x2a, 0x44, 0x84, 0xce, 0x96, 0x2f, 0x8a, 0x01, 0x3a, 0xc6, 0x01, 0x74, 0x23, 0xce, 0x96, 0xf1,
	0xca, 0x6d, 0x6b, 0x37, 0x57, 0xde, 0x0d, 0x38, 0x81, 0xe4, 0x69, 0xe3, 0x40, 0xef, 0x16, 0xce,
	0x7c, 0xce, 0x64, 0xcc, 0x32, 0xda, 0x5c, 0x38, 0x82, 0xbe, 0xbf, 0xa6, 0x51, 0xd2, 0x5c, 0xf5,
	0x69, 0x81, 0x13, 0x84, 0x6f, 0xf4, 0xcf, 0x2d, 0xd2, 0x50, 0xae, 0x8b, 0x2d, 0x54, 0x8c, 0x2e,
	0x1c, 0x89, 0xdd, 0x66, 0xa6, 0x96, 0x6b, 0x6b, 0x7e, 0x85, 0x54, 0xfb, 0x89, 0xa9, 0x4e, 0x74,
	0x74, 0x22, 0x57, 0xca, 0x5f, 0x0a, 0xed, 0xff, 0x37, 0xbe, 0x51, 0x77, 0x5f, 0x2d, 0xe8, 0xaa,
	0xef, 0xd3, 0x3d, 0x3e, 0x00, 0x90, 0x8c, 0xcd, 0xe9, 0xbb, 0xd2, 0x78, 0x3e, 0xd1, 0x47, 0xac,
	0x42, 0xbe, 0x72, 0x8c, 0x5b, 0xde, 0xd2, 0xfb, 0x87, 0xf7, 0xd0, 0x2b, 0xc8, 0xe1, 0x85, 0x49,
	0x1f, 0x90, 0xac, 0xeb, 0x7a, 0x82, 0x63, 0x9f, 0xb3, 0x58, 0xe6, 0x28, 0xf1, 0xd2, 0x94, 0xd4,
	0xe0, 0xad, 0xeb, 0x7e, 0x04, 0xbb, 0xe4, 0x8b, 0x83, 0xbc, 0xf5, 0x00, 0xf8, 0x6f, 0x6f, 0xcd,
	0x81, 0x97, 0x6f, 0xad, 0x1e, 0xa0, 0xa6, 0xeb, 0xb5, 0xab, 0xff, 0xe4, 0xe9, 0x77, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x7e, 0x0c, 0x1c, 0xdf, 0xd7, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TaskerClient is the client API for Tasker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TaskerClient interface {
	// RunNewTask
	RunNewTask(ctx context.Context, in *RunTaskRequest, opts ...grpc.CallOption) (*TaskReply, error)
	StopTask(ctx context.Context, in *StopTaskRequest, opts ...grpc.CallOption) (*TaskReply, error)
	ConitnueTask(ctx context.Context, in *ContinueTaskRequest, opts ...grpc.CallOption) (*TaskReply, error)
	CheckTask(ctx context.Context, in *CheckTaskRequest, opts ...grpc.CallOption) (*TaskReply, error)
	SaveTask(ctx context.Context, in *SaveTaskRequest, opts ...grpc.CallOption) (*TaskReply, error)
}

type taskerClient struct {
	cc *grpc.ClientConn
}

func NewTaskerClient(cc *grpc.ClientConn) TaskerClient {
	return &taskerClient{cc}
}

func (c *taskerClient) RunNewTask(ctx context.Context, in *RunTaskRequest, opts ...grpc.CallOption) (*TaskReply, error) {
	out := new(TaskReply)
	err := c.cc.Invoke(ctx, "/task.Tasker/RunNewTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskerClient) StopTask(ctx context.Context, in *StopTaskRequest, opts ...grpc.CallOption) (*TaskReply, error) {
	out := new(TaskReply)
	err := c.cc.Invoke(ctx, "/task.Tasker/StopTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskerClient) ConitnueTask(ctx context.Context, in *ContinueTaskRequest, opts ...grpc.CallOption) (*TaskReply, error) {
	out := new(TaskReply)
	err := c.cc.Invoke(ctx, "/task.Tasker/ConitnueTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskerClient) CheckTask(ctx context.Context, in *CheckTaskRequest, opts ...grpc.CallOption) (*TaskReply, error) {
	out := new(TaskReply)
	err := c.cc.Invoke(ctx, "/task.Tasker/CheckTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskerClient) SaveTask(ctx context.Context, in *SaveTaskRequest, opts ...grpc.CallOption) (*TaskReply, error) {
	out := new(TaskReply)
	err := c.cc.Invoke(ctx, "/task.Tasker/SaveTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskerServer is the server API for Tasker service.
type TaskerServer interface {
	// RunNewTask
	RunNewTask(context.Context, *RunTaskRequest) (*TaskReply, error)
	StopTask(context.Context, *StopTaskRequest) (*TaskReply, error)
	ConitnueTask(context.Context, *ContinueTaskRequest) (*TaskReply, error)
	CheckTask(context.Context, *CheckTaskRequest) (*TaskReply, error)
	SaveTask(context.Context, *SaveTaskRequest) (*TaskReply, error)
}

// UnimplementedTaskerServer can be embedded to have forward compatible implementations.
type UnimplementedTaskerServer struct {
}

func (*UnimplementedTaskerServer) RunNewTask(ctx context.Context, req *RunTaskRequest) (*TaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunNewTask not implemented")
}
func (*UnimplementedTaskerServer) StopTask(ctx context.Context, req *StopTaskRequest) (*TaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopTask not implemented")
}
func (*UnimplementedTaskerServer) ConitnueTask(ctx context.Context, req *ContinueTaskRequest) (*TaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConitnueTask not implemented")
}
func (*UnimplementedTaskerServer) CheckTask(ctx context.Context, req *CheckTaskRequest) (*TaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckTask not implemented")
}
func (*UnimplementedTaskerServer) SaveTask(ctx context.Context, req *SaveTaskRequest) (*TaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveTask not implemented")
}

func RegisterTaskerServer(s *grpc.Server, srv TaskerServer) {
	s.RegisterService(&_Tasker_serviceDesc, srv)
}

func _Tasker_RunNewTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskerServer).RunNewTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.Tasker/RunNewTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskerServer).RunNewTask(ctx, req.(*RunTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tasker_StopTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskerServer).StopTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.Tasker/StopTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskerServer).StopTask(ctx, req.(*StopTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tasker_ConitnueTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContinueTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskerServer).ConitnueTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.Tasker/ConitnueTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskerServer).ConitnueTask(ctx, req.(*ContinueTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tasker_CheckTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskerServer).CheckTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.Tasker/CheckTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskerServer).CheckTask(ctx, req.(*CheckTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tasker_SaveTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskerServer).SaveTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.Tasker/SaveTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskerServer).SaveTask(ctx, req.(*SaveTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Tasker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "task.Tasker",
	HandlerType: (*TaskerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunNewTask",
			Handler:    _Tasker_RunNewTask_Handler,
		},
		{
			MethodName: "StopTask",
			Handler:    _Tasker_StopTask_Handler,
		},
		{
			MethodName: "ConitnueTask",
			Handler:    _Tasker_ConitnueTask_Handler,
		},
		{
			MethodName: "CheckTask",
			Handler:    _Tasker_CheckTask_Handler,
		},
		{
			MethodName: "SaveTask",
			Handler:    _Tasker_SaveTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "task.proto",
}
